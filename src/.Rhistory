+ first_streaming_platform_name
+ first_streaming_mobile_platform_name
+ windows_streamed
+ top_genre
+ vm_dma_counter_categorized
,
family = binomial(link = 'logit'), data = train)
summary(train.glm)
result <- predict(train.glm, test, type = "response")
result <- ifelse(result>0.50,1,0)
x = table(result,test$y)
x
cat(sprintf("accuracy = %f", sum(diag(x))/sum(x)))
table(result,test$longevity_level)
head(user_features.cumulative)
corr.summary
longevity.corr
setwd("~/Desktop/programs/kaggle/src/")
train <- read.csv("../data/titanic/train.csv")
test <- read.csv("../data/titanic/test.csv")
train[is.na(train)] = 0
test[is.na(test)] = 0
train.glm <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
result <- as.data.frame(predict(train.glm, test, type = "response"))
colnames(result) <- c("Survived")
result$PassengerId <- test$PassengerId
result$Survived = ifelse(result$Survived >= 0.5, 1, 0)
result <- as.data.frame(predict(train.glm, test, type = "response"))
colnames(result) <- c("Survived")
result$PassengerId <- test$PassengerId
result$Survived = ifelse(result$Survived >= 0.6, 1, ifelse(result$Survived <= 0.4,0,0.5))
result <- result[,c(2,1)]
View(result)
View(train)
summary(train)
train.corr <- cor(train)
library(dplyr)
numeric_columns <- lapply(train, is.numeric)
train.numeric <- train[,numeric_columns]
train.numeric <- train[,c(numeric_columns)]
numeric_columns <- sapply(train, is.numeric)
train.numeric <- train[,c(numeric_columns)]
train.corr <- cor(train.numeric)
corrplot(train.corr, method = "circle", type = "lower", tl.cex = 0.5, title = "Train")
library(corrplot)
corrplot(train.corr, method = "circle", type = "lower", tl.cex = 0.5, title = "Train")
install.packages("ggfortify")
library(ggfortify)
ggdistribution(train.numeric$Age)
d <- density(train.numeric$Age)
plot(d)
plot(density(train.numeric$Age))
lines(density(train.numeric$Survived))
lines(density(train.numeric$Survived))
install.packages("lattice")
library(lattice)
densityplot(~Survived + Age, data = train.numeric)
densityplot(~Age + Survived, data = train.numeric)
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_boxplot()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_boxplot(train.numeric$Age)
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_boxplot(aes(x = train.numeric$Age))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_boxplot(aes(x = train.numeric$Age, y = train.numeric$Survived))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_histogram(aes(x = train.numeric$Age, y = train.numeric$Survived))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_density(aes(x = train.numeric$Age, y = train.numeric$Survived))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_bar(aes(x = train.numeric$Age, y = train.numeric$Survived))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_abline(aes(x = train.numeric$Age, y = train.numeric$Survived))
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_abline(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_boxplot(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_bar(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_freqpoly(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_line(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_polygon(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_bin2d(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_curve(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_area(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_col(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Age, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train.numeric, aes(x = Sex, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Sex, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Fare, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Age, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Age, color = Survived)) + geom_density()
ggplot(train, aes(x = Age, group = Survived)) + geom_density()
ggplot(train, aes(x = Age, group = Survived, fill = Survived)) + geom_density()
ggplot(train, aes(x = Age, group = Survived, color = Survived)) + geom_density()
ggplot(train, aes(x = Age, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Fare, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Fare, group = Survived, color = Survived)) + geom_density()
ggplot(train, aes(x = Embarked, group = Survived, fill = Survived)) + geom_histogram(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Embarked, group = Survived, fill = Survived)) + geom_boxplot(position="dodge",binwidth=0.25)+theme_bw()
ggplot(train, aes(x = Embarked, group = Survived, fill = Survived)) + geom_boxplot()
ggplot(train, aes(x = Embarked, group = Survived, fill = Survived)) + geom_boxplot(y = Embarked)
ggplot(train, aes(x = Fare, group = Survived, color = Survived)) + geom_histogram()
ggplot(train, aes(x = Embarked, group = Survived, color = Survived)) + geom_histogram()
plot(train$Embarked, train$Survived)
ggplot(train$Embarked, train$Survived)
ggplot(train, aes(x = Embarked, y = Survived, color = Survived)) + geom_histogram()
ggplot(train, aes(x = Embarked, y = Survived, fill = Survived)) + geom_boxplot(y = Embarked)
ggplot(train, aes(x = Embarked, y = Survived, fill = Survived)) + geom_boxplot()
ggplot(train, aes(x = Embarked, y = Survived, color = Survived)) + geom_boxplot()
hist(train$Embarked)
frequency(train$Embarked)
densityplot(~Embarked)
densityplot(~Embarked, data = train)
library(tabplot)
tableplot(train)
tableplot(train, sortCol = 2)
tableplot(train[c("Embarked", "Survived")], sortCol = 2)
tableplot(train[,c("Survived", "Sex", "Pclass", "SibSp", Parch)], sortCol = 1)
tableplot(train[,c("Survived", "Sex", "Pclass", "SibSp", "Parch")], sortCol = 1)
count(train$Survived==1)
sum(train$Survived)
342/841
train$Sex = ifelse(train$Sex=="male",1,0)
train$Pclass1 = ifelse(train$Pclass==1,1,0)
train$Pclass2 = ifelse(train$Pclass==2,1,0)
train$Pclass3 = ifelse(train$Pclass==3,1,0)
train$EmbarkedS = ifelse(train$Embarked=="S",1,0)
train$EmbarkedC = ifelse(train$Embarked=="C",1,0)
train$EmbarkedQ = ifelse(train$Embarked=="Q",1,0)
library("corrplot")
library("data.table")
library("dplyr")
library("reshape2")
library(mlbench)
library(plyr)
library(tabplot)
require(ggplot2)
setwd("/Users/pawan/Desktop/slingtv/goldmine/src/")
#read cumulative user features sample data
user_features.cumulative <- read.csv("../../data/feature_selection/cumulative_user_features_sample_100k.txt", sep = "\t", quote = "", header = TRUE)
user_features.cumulative[is.na(user_features.cumulative)] = 0
nrow(user_features.cumulative)
head(user_features.cumulative)
#add subscription_days_count >= 30 filter
user_features.cumulative <- user_features.cumulative %>% filter(subscription_days_count >= 30)
#add streaming fraction features
newFeatures = c("weekend_streaming_fraction","weekday_streaming_fraction","roku_streaming_fraction","android_tv_streaming_fraction","tv_os_streaming_fraction","android_streaming_fraction","xbox1_streaming_fraction","ios_streaming_fraction","chromecast_streaming_fraction","windows_streaming_fraction","microsoft_streaming_fraction","mac_streaming_fraction","lg_streaming_fraction","sherbet_streaming_fraction","tenft_streaming_fraction","mobile_streaming_fraction","sports_channel_streaming_fraction","news_channel_streaming_fraction","kids_channel_streaming_fraction","brazilian_channel_streaming_fraction","premium_channel_streaming_fraction","arabic_channel_streaming_fraction","cantonese_channel_streaming_fraction","movie_channel_streaming_fraction","mandarin_channel_streaming_fraction","south_asian_channel_streaming_fraction","first_streaming_fraction","first_mobile_streaming_fraction","weekend_mobile_streaming_fraction","weekday_mobile_streaming_fraction","first_10ft_streaming_fraction","weekend_10ft_streaming_fraction","weekday_10ft_streaming_fraction","rainy_day_streaming_fraction","snowy_day_streaming_fraction","rainy_day_streaming_fraction_10ft","snowy_day_streaming_fraction_10ft","rainy_day_streaming_fraction_mobile","snowy_day_streaming_fraction_mobile")
oldFeatures = c("weekend_streaming_minutes","weekday_streaming_minutes","roku_streaming_minutes","android_tv_streaming_minutes","tv_os_streaming_minutes","android_streaming_minutes","xbox1_streaming_minutes","ios_streaming_minutes","chromecast_streaming_minutes","windows_streaming_minutes","microsoft_streaming_minutes","mac_streaming_minutes","lg_streaming_minutes","sherbet_streaming_minutes","tenft_streaming_minutes","mobile_streaming_minutes","sports_channel_streaming_minutes","news_channel_streaming_minutes","kids_channel_streaming_minutes","brazilian_channel_streaming_minutes","premium_channel_streaming_minutes","arabic_channel_streaming_minutes","cantonese_channel_streaming_minutes","movie_channel_streaming_minutes","mandarin_channel_streaming_minutes","south_asian_channel_streaming_minutes","first_streaming_minutes","first_mobile_streaming_minutes","weekend_mobile_streaming_minutes","weekday_mobile_streaming_minutes","first_10ft_streaming_minutes","weekend_10ft_streaming_minutes","weekday_10ft_streaming_minutes","rainy_day_streaming_minutes","snowy_day_streaming_minutes","rainy_day_streaming_minutes_10ft","snowy_day_streaming_minutes_10ft","rainy_day_streaming_minutes_mobile","snowy_day_streaming_minutes_mobile")
user_features.cumulative[oldFeatures] = user_features.cumulative[,oldFeatures]/user_features.cumulative$streaming_minutes
names(user_features.cumulative)[match(oldFeatures, names(user_features.cumulative))] <- newFeatures
nrow(user_features.cumulative)
summary(user_features.cumulative)
cols <- c(43,1:5)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,6:10)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,11:15)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,16:20)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,21:25)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,26:30)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,31:35)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,36:40)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,41:45)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,46:50)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,51:55)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,56:60)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,61:65)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,66:70)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,71:75)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,76:80)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,81:85)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,86:90)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,91:95)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,96:100)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,101:105)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,106:110)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
cols <- c(43,111:114)
tableplot(user_features.cumulative[,cols], cex = 1.8, sortCol = 1)
#cohorts
user_features.cumulative$subscription_start_date <- as.Date(user_features.cumulative$subscription_start_date)
cohort.may_june <- user_features.cumulative %>% filter(subscription_start_date >= as.Date("2016-05-01") & subscription_start_date < as.Date("2016-07-01"))
cohort.sept_oct <- user_features.cumulative %>% filter(subscription_start_date >= as.Date("2016-09-01") & subscription_start_date < as.Date("2016-11-01"))
cohort.dec_jan <- user_features.cumulative %>% filter(subscription_start_date >= as.Date("2016-12-01") & subscription_start_date < as.Date("2017-02-01"))
#get numeric column names
numeric_columns <- sapply(user_features.cumulative, is.numeric)
#get numeric features for all cohorts
user_features.cumulative.numeric <- user_features.cumulative[,numeric_columns]
cohort.may_june.numeric <- cohort.may_june[ ,numeric_columns]
cohort.sept_oct.numeric <- cohort.sept_oct[ ,numeric_columns]
cohort.dec_jan.numeric <- cohort.dec_jan[ ,numeric_columns]
nrow(cohort.may_june.numeric)
nrow(cohort.sept_oct.numeric)
nrow(cohort.dec_jan.numeric)
user_features.cumulative.corr <- cor(user_features.cumulative.numeric)
may_june.corr <- cor(cohort.may_june.numeric)
sept_oct.corr <- cor(cohort.sept_oct.numeric)
dec_jan.corr <- cor(cohort.dec_jan.numeric)
corrplot(user_features.cumulative.corr, method = "circle", type = "lower", tl.cex = 0.5, title = "All users - all numeric features")
corrplot(may_june.corr, method = "circle", type = "lower", tl.cex = 0.5, title = "May-June cohort all numeric features")
corrplot(sept_oct.corr, method = "circle", type = "lower", tl.cex = 0.5, title = "Sept-Oct cohort all numeric features")
corrplot(dec_jan.corr, method = "circle", type = "lower", tl.cex = 0.5, title = "Dec-Jan cohort all numeric features")
# THIS FUNCTION WILL DROP ANY FEATURE PAIR WITH CORRELATION (absolute value) < 0.3
dropLessCorr <- function(user_features){
result = user_features
result[result==1] <- NA
result[abs(result) < 0.3] <- NA
result <- na.omit(melt(result))
result[order(-abs(result$value), result$Var1, result$Var2),]
return(result)
}
user_features.cumulative.corr.summary <- dropLessCorr(user_features.cumulative.corr)
may_june.corr.summary <- dropLessCorr(may_june.corr)
sept_oct.corr.summary <- dropLessCorr(sept_oct.corr)
dec_jan.corr.summary <- dropLessCorr(dec_jan.corr)
corr.summary <- merge(user_features.cumulative.corr.summary, merge(may_june.corr.summary, merge(sept_oct.corr.summary, dec_jan.corr.summary, by = c("Var1", "Var2"), all = TRUE),  by = c("Var1", "Var2"), all = TRUE),   by = c("Var1", "Var2"), all = TRUE)
colnames(corr.summary)[3:6] <- c("user_features.cumulative.corr", "may_june.corr", "sept_oct.corr", "dec_jan.corr")
corr.summary
#correlation with subscription_days_count
user_features.cumulative.subscription_days_count <- cor(x = user_features.cumulative.numeric$subscription_days_count, y = user_features.cumulative.numeric, use = "complete.obs")
corrplot(user_features.cumulative.subscription_days_count, tl.cex = 0.5, tl.srt = 25, title = "Entire data subscription_days_count")
user_features.cumulative.subscription_days_count.summary <- dropLessCorr(user_features.cumulative.subscription_days_count)
user_features.cumulative.subscription_days_count.summary
may_june.corr.subscription_days_count <- cor(x = cohort.may_june.numeric$subscription_days_count, y = cohort.may_june.numeric, use = "complete.obs")
corrplot(may_june.corr.subscription_days_count, tl.cex = 0.5, tl.srt = 25, title = "May-June cohort subscription_days_count")
may_june.corr.subscription_days_count.summary <- dropLessCorr(may_june.corr.subscription_days_count)
may_june.corr.subscription_days_count.summary
sept_oct.corr.subscription_days_count <- cor(x = cohort.sept_oct.numeric$subscription_days_count, y = cohort.sept_oct.numeric, use = "complete.obs")
corrplot(sept_oct.corr.subscription_days_count, tl.cex = 0.5, tl.srt = 25, title = "May-June cohort subscription_days_count")
sept_oct.corr.subscription_days_count.summary <- dropLessCorr(sept_oct.corr.subscription_days_count)
sept_oct.corr.subscription_days_count.summary
dec_jan.corr.subscription_days_count <- cor(x = cohort.dec_jan.numeric$subscription_days_count, y = cohort.dec_jan.numeric, use = "complete.obs")
corrplot(dec_jan.corr.subscription_days_count, tl.cex = 0.5, tl.srt = 25, title = "May-June cohort subscription_days_count")
dec_jan.corr.subscription_days_count.summary <- dropLessCorr(dec_jan.corr.subscription_days_count)
dec_jan.corr.subscription_days_count.summary
longevity.corr <- merge(user_features.cumulative.subscription_days_count.summary, merge(may_june.corr.subscription_days_count.summary, merge(sept_oct.corr.subscription_days_count.summary, dec_jan.corr.subscription_days_count.summary, by = c("Var1", "Var2"), all = TRUE), by = c("Var1", "Var2"), all = TRUE), by = c("Var1", "Var2"), all = TRUE)
colnames(longevity.corr)[3:6] = c("user_features.cumulative.subscription_days_count", "may_june.corr.subscription_days_count", "sept_oct.corr.subscription_days_count","dec_jan.corr.subscription_days_count")
longevity.corr
may_june.av <- aov(subscription_days_count~subscription_status + top_program_name + top_channel + top_mobile_program_name + top_mobile_genre + top_genre + top_mobile_channel + top_10ft_program_name + top_10ft_genre + top_10ft_channel, data = cohort.may_june)
# sept_oct.av <- aov(subscription_days_count~subscription_status + top_program_name + top_channel + top_mobile_program_name + top_mobile_genre + top_genre + top_mobile_channel + top_10ft_program_name + top_10ft_genre + top_10ft_channel, data = cohort.sept_oct)
# dec_jan.av <- aov(subscription_days_count~subscription_status + top_program_name + top_channel + top_mobile_program_name + top_mobile_genre + top_genre + top_mobile_channel + top_10ft_program_name + top_10ft_genre + top_10ft_channel, data = cohort.dec_jan)
summary(may_june.av)
# summary(sept_oct.av)
# summary(dec_jan.av)
library('Metrics')
library('dplyr')
library("FSelector")
library("tibble")
setwd("~/Desktop/slingtv/goldmine/src")
user_features.cumulative.categorized <- read.csv("../../data/feature_selection/cumulative_user_features_sample_100k.txt", sep = "\t", quote = "", header = TRUE)
# Add aforementioned categorical features
user_features.cumulative.categorized[is.na(user_features.cumulative.categorized)] = 0
user_features.cumulative.categorized$longevity_level = ifelse(user_features.cumulative.categorized$subscription_days_count < 30, "level0", ifelse(user_features.cumulative.categorized$subscription_days_count >= 30 & user_features.cumulative.categorized$subscription_days_count < 90, "level1", ifelse(user_features.cumulative.categorized$subscription_days_count >= 90 & user_features.cumulative.categorized$subscription_days_count < 180, "level2", ifelse(user_features.cumulative.categorized$subscription_days_count >= 180 & user_features.cumulative.categorized$subscription_days_count < 270,"level3","level4"))))
user_features.cumulative.categorized$streamed_channel_genre_count_categorized = ifelse(user_features.cumulative.categorized$streamed_channel_genre_count>=0 & user_features.cumulative.categorized$streamed_channel_genre_count<=3,paste(as.character(user_features.cumulative.categorized$streamed_channel_genre_count),"channel(s)",sep = "_"),"4+ channels")
user_features.cumulative.categorized$vm_zip_counter_categorized = ifelse(user_features.cumulative.categorized$vm_zip_counter>=0 & user_features.cumulative.categorized$vm_zip_counter<=3,paste(as.character(user_features.cumulative.categorized$vm_zip_counter),"zip(s)",sep = "_"),"4+ zips")
user_features.cumulative.categorized$vm_dma_counter_categorized = ifelse(user_features.cumulative.categorized$vm_dma_counter>=0 & user_features.cumulative.categorized$vm_dma_counter<=3,paste(as.character(user_features.cumulative.categorized$vm_dma_counter),"dma(s)",sep = "_"),"4+ dmas")
user_features.cumulative.categorized$weekend_streamed = ifelse(user_features.cumulative.categorized$weekend_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$weekday_streamed = ifelse(user_features.cumulative.categorized$weekday_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$roku_streamed = ifelse(user_features.cumulative.categorized$roku_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$android_tv_streamed = ifelse(user_features.cumulative.categorized$android_tv_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$tv_os_streamed = ifelse(user_features.cumulative.categorized$tv_os_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$xbox1_streamed = ifelse(user_features.cumulative.categorized$xbox1_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$ios_streamed = ifelse(user_features.cumulative.categorized$ios_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$chromecast_streamed = ifelse(user_features.cumulative.categorized$chromecast_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$windows_streamed = ifelse(user_features.cumulative.categorized$windows_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$microsoft_streamed = ifelse(user_features.cumulative.categorized$microsoft_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$mac_streamed = ifelse(user_features.cumulative.categorized$mac_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$lg_streamed = ifelse(user_features.cumulative.categorized$lg_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$sherbet_streamed = ifelse(user_features.cumulative.categorized$sherbet_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$sports_streamed = ifelse(user_features.cumulative.categorized$sports_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$news_streamed = ifelse(user_features.cumulative.categorized$news_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$kids_channel_streamed = ifelse(user_features.cumulative.categorized$kids_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$brazilian_channel_streamed = ifelse(user_features.cumulative.categorized$brazilian_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$premium_streamed = ifelse(user_features.cumulative.categorized$premium_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$arabic_streamed = ifelse(user_features.cumulative.categorized$arabic_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$cantonese_streamed = ifelse(user_features.cumulative.categorized$cantonese_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$movie_streamed = ifelse(user_features.cumulative.categorized$movie_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$mandarin_streamed = ifelse(user_features.cumulative.categorized$mandarin_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$south_asian_streamed = ifelse(user_features.cumulative.categorized$south_asian_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$sports_streamed = ifelse(user_features.cumulative.categorized$sports_channel_streaming_minutes > 0, 1, 0)
user_features.cumulative.categorized$streaming_stalls_categorized = ifelse(user_features.cumulative.categorized$streaming_stalls_count == 0, "0 stalls", ifelse(user_features.cumulative.categorized$streaming_stalls_count >= 1 & user_features.cumulative.categorized$streaming_stalls_count <=5 ,"1-5 stalls", "6+ stalls"))
user_features.cumulative.categorized$avg_streaming_minutes_categorized <- ifelse(user_features.cumulative.categorized$avg_streaming_minutes >= 0 & user_features.cumulative.categorized$avg_streaming_minutes <= 30, "0-30", ifelse(user_features.cumulative.categorized$avg_streaming_minutes >= 31 & user_features.cumulative.categorized$avg_streaming_minutes <= 60, "31-60", ifelse(user_features.cumulative.categorized$avg_streaming_minutes >= 61 & user_features.cumulative.categorized$avg_streaming_minutes <= 120, "60-120", "120+")))
head(user_features.cumulative.categorized)
nrow(user_features.cumulative.categorized)
cols <- c(115:120)
tableplot(user_features.cumulative.categorized[,cols], cex = 1.8, sortCol = 1)
cols <- c(115,121:125)
tableplot(user_features.cumulative.categorized[,cols], cex = 1.8, sortCol = 1)
cols <- c(115,125:130)
tableplot(user_features.cumulative.categorized[,cols], cex = 1.8, sortCol = 1)
cols <- c(115,131:135)
tableplot(user_features.cumulative.categorized[,cols], cex = 1.8, sortCol = 1)
cols <- c(115,136:140)
tableplot(user_features.cumulative.categorized[,cols], cex = 1.8, sortCol = 1)
cols <- c(115,141:142)
tableplot(user_features.cumulative.categorized[,cols], cex = 1.8, sortCol = 1)
chisqtest <- chi.squared(longevity_level~mobile_10ft_combination + subscription_status + first_streaming_platform_name + vm_dma1 + first_streaming_mobile_platform_name + top_mobile_genre + top_genre + first_streaming_10ft_platform_name + has_multiple_streams + streaming_stalls_categorized + sports_streamed + south_asian_streamed + mandarin_streamed + movie_streamed + cantonese_streamed + arabic_streamed + premium_streamed + brazilian_channel_streamed + kids_channel_streamed + news_streamed + sports_streamed + sherbet_streamed + lg_streamed + mac_streamed + microsoft_streamed + windows_streamed + chromecast_streamed + ios_streamed + xbox1_streamed + tv_os_streamed + android_tv_streamed + roku_streamed + weekday_streamed + weekend_streamed + vm_dma_counter_categorized + vm_zip_counter_categorized + streamed_channel_genre_count_categorized + avg_streaming_minutes_categorized, data = user_features.cumulative.categorized)
chisqtest <- rownames_to_column(chisqtest, var = "feature_name")
chisqtest
# For longevity level1plus, take May 2016 to February 2017
# For longevity level2plus, take May 2016 to December 2016
# For longevity level3plus, take May 2016 to October 2017
# For longevity level4plus, take May 2016 to September 2017
# y = level3plus (Change this)
cohort_start_date <- as.Date("2016-05-01")
cohort_end_date <- as.Date("2016-10-01")
#Take cohort of people who joined between cohort_start_date and cohort_end_date
user_features.cumulative.categorized.cohort<- user_features.cumulative.categorized %>% filter(as.Date(subscription_start_date) >= cohort_start_date & as.Date(subscription_start_date) < cohort_end_date)
# Add level1plus (0/1) output variable
user_features.cumulative.categorized.cohort$level1plus = ifelse(user_features.cumulative.categorized.cohort$longevity_level %in% c("level1", "level2", "level3", "level4"), 1, 0)
# Add level2plus (0/1) output variable
user_features.cumulative.categorized.cohort$level2plus = ifelse(user_features.cumulative.categorized.cohort$longevity_level %in% c("level2", "level3", "level4"), 1, 0)
# Add level3plus (0/1) output variable
user_features.cumulative.categorized.cohort$level3plus = ifelse(user_features.cumulative.categorized.cohort$longevity_level %in% c("level3", "level4"), 1, 0)
# Add level4plus (0/1) output variable
user_features.cumulative.categorized.cohort$level4plus = ifelse(user_features.cumulative.categorized.cohort$longevity_level %in% c("level4"), 1, 0)
#Create train and test data for GLM
train <- user_features.cumulative.categorized.cohort
rows = nrow(train)
# Training and testing set
test <- train[as.numeric(rows*0.8):rows,] # Take 20% data to test glm model
train <- train[1:as.numeric(rows*0.8)-1,] # Take 80% data to train glm model
train$y = train$level1plus #reassign different 0/1 output variable
test$y = test$level1plus #reassign different 0/1 output variable
train.glm <- glm(y ~ news_streamed
+ premium_streamed
+ streaming_stalls_categorized
+ weekend_streamed
+ mobile_10ft_combination
# + top_program_name
#moderately correlated
+ unique_channel_count
+ unique_program_count
+ device_count
+ kids_channel_streamed
+ streamed_channel_genre_count_categorized
+ roku_streamed + sports_streamed
+ sherbet_streamed
+ vm_zip_counter_categorized
+ has_multiple_streams
+ weekday_streamed
+ ios_streamed
+ first_streaming_10ft_platform_name
+ south_asian_streamed
+ first_streaming_platform_name
+ first_streaming_mobile_platform_name
+ windows_streamed
+ top_genre
+ vm_dma_counter_categorized
,
family = binomial(link = 'logit'), data = train)
summary(train.glm)
result <- predict(train.glm, test, type = "response")
result <- ifelse(result>0.50,1,0)
x = table(result,test$y)
x
cat(sprintf("accuracy = %f", sum(diag(x))/sum(x)))
table(result,test$longevity_level)
train$y = train$level2plus #reassign different 0/1 output variable
test$y = test$level2plus #reassign different 0/1 output variable
train.glm <- glm(y ~ news_streamed
+ premium_streamed
+ streaming_stalls_categorized
+ weekend_streamed
+ mobile_10ft_combination
# + top_program_name
#moderately correlated
+ unique_channel_count
+ unique_program_count
+ device_count
+ kids_channel_streamed
+ streamed_channel_genre_count_categorized
+ roku_streamed + sports_streamed
+ sherbet_streamed
+ vm_zip_counter_categorized
+ has_multiple_streams
+ weekday_streamed
+ ios_streamed
+ first_streaming_10ft_platform_name
+ south_asian_streamed
+ first_streaming_platform_name
+ first_streaming_mobile_platform_name
+ windows_streamed
+ top_genre
+ vm_dma_counter_categorized
,
family = binomial(link = 'logit'), data = train)
summary(train.glm)
result <- predict(train.glm, test, type = "response")
result <- ifelse(result>0.50,1,0)
x = table(result,test$y)
x
cat(sprintf("accuracy = %f", sum(diag(x))/sum(x)))
table(result,test$longevity_level)
train$y = train$level3plus #reassign different 0/1 output variable
test$y = test$level3plus #reassign different 0/1 output variable
train.glm <- glm(y ~ news_streamed
+ premium_streamed
+ streaming_stalls_categorized
+ weekend_streamed
+ mobile_10ft_combination
# + top_program_name
#moderately correlated
+ unique_channel_count
+ unique_program_count
+ device_count
+ kids_channel_streamed
+ streamed_channel_genre_count_categorized
+ roku_streamed + sports_streamed
+ sherbet_streamed
+ vm_zip_counter_categorized
+ has_multiple_streams
+ weekday_streamed
+ ios_streamed
+ first_streaming_10ft_platform_name
+ south_asian_streamed
+ first_streaming_platform_name
+ first_streaming_mobile_platform_name
+ windows_streamed
+ top_genre
+ vm_dma_counter_categorized
,
family = binomial(link = 'logit'), data = train)
summary(train.glm)
result <- predict(train.glm, test, type = "response")
result <- ifelse(result>0.50,1,0)
x = table(result,test$y)
x
cat(sprintf("accuracy = %f", sum(diag(x))/sum(x)))
table(result,test$longevity_level)
train$y = train$level4plus #reassign different 0/1 output variable
test$y = test$level4plus #reassign different 0/1 output variable
train.glm <- glm(y ~ news_streamed
+ premium_streamed
+ streaming_stalls_categorized
+ weekend_streamed
+ mobile_10ft_combination
# + top_program_name
#moderately correlated
+ unique_channel_count
+ unique_program_count
+ device_count
+ kids_channel_streamed
+ streamed_channel_genre_count_categorized
+ roku_streamed + sports_streamed
+ sherbet_streamed
+ vm_zip_counter_categorized
+ has_multiple_streams
+ weekday_streamed
+ ios_streamed
+ first_streaming_10ft_platform_name
+ south_asian_streamed
+ first_streaming_platform_name
+ first_streaming_mobile_platform_name
+ windows_streamed
+ top_genre
+ vm_dma_counter_categorized
,
family = binomial(link = 'logit'), data = train)
summary(train.glm)
result <- predict(train.glm, test, type = "response")
result <- ifelse(result>0.50,1,0)
x = table(result,test$y)
x
cat(sprintf("accuracy = %f", sum(diag(x))/sum(x)))
table(result,test$longevity_level)
train <- read.csv("../data/titanic/train.csv")
View(train)
train$titleMr = grepl("Mr", train$Name)
train$titleMr = grepl("Mr.", train$Name)
View(train)
train$titleMr = grepl("Mr\.", train$Name)
train$titleMr = grepl("Mr. ", train$Name)
train$titleMr = ifelse(train$titleMr==TRUE,1,0)
titles <- distinct(c("Capt.", "Officer.",  "Col.", "Officer.",  "Major.", "Officer.",  "Jonkheer.", "Royalty.",  "Don.", "Royalty.",  "Sir." , "Royalty.",  "Dr.", "Officer.",  "Rev.",  "the Countess", "Dona.",  "Mme.", "Mrs.",  "Mlle.", "Miss.",  "Ms.", "Mr.", "Master." , "Lady."))
train$title <- grepl(paste(titles, collapse = "|"), train$Name)
titles <- c("Capt.", "Col.", "Major.", "Jonkheer.", "Don.", "Sir.", "Dr.", "Rev.", "Mme.", "Mlle.", "Ms.", "Mr.", "Mrs.", "Miss.", "Master.", "Lady.")
train$title <- grepl(paste(titles, collapse = "|"), train$Name)
train$title <- gsub(paste(titles, collapse = "|"), train$Name)
train$title <- unique(grepl(paste(titles, collapse = "|"), train$Name))
train$title <- grepl(paste(titles, collapse = "|"), train$Name)
train$title <- grep(paste(titles, collapse = "|"), train$Name)
train$title <- grep(paste(titles, collapse = "|"), train$Name, value = TRUE)
library(dplyr)
library(corrplot)
library(ggfortify)
library(tabplot)
setwd("~/Desktop/programs/kaggle/src/")
train <- read.csv("../data/titanic/train.csv")
test <- read.csv("../data/titanic/test.csv")
train[is.na(train)] = 0
test[is.na(test)] = 0
titles <- c("Capt.", "Col.", "Major.", "Jonkheer.", "Don.", "Sir.", "Dr.", "Rev.", "Mme.", "Mlle.", "Ms.", "Mr.", "Mrs.", "Miss.", "Master.", "Lady.")
train$title <- grep(paste(titles, collapse = "|"), train$Name, value = TRUE)
train$temp <- NA
titles <- c("Capt.", "Col.", "Major.", "Jonkheer.", "Don.", "Sir.", "Dr.", "Rev.", "Mme.", "Mlle.", "Ms.", "Mr.", "Mrs.", "Miss.", "Master.", "Lady.")
train$title <- grep(paste(titles, collapse = "|"), train$Name, value = TRUE)
train$Name <- cut(train$Name)
gsub(train$Name, match(train$Name,paste(titles, collapse = "|")))
train$title = gsub(train$Name, match(train$Name,paste(titles, collapse = "|")))
